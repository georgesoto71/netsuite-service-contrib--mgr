//~ Generated by SearchStubs/SearchRowBasic

using System;
using System.Collections.Generic;

namespace SuiteTalk
{
    partial class TaxDetailSearchRowBasic
    {
        // TODO: Make this Lazy and Weak referenced so that it can be garbaged collected
        private static readonly Lazy<ColumnFactory> columnFactoryLoader = new Lazy<ColumnFactory>(() => new ColumnFactory());

        public override void SetColumns(string[] columnNames)
        {
            var factory = columnFactoryLoader.Value;
            for (int i = 0; i < columnNames.Length; i++)
            {
                factory.BuildColumn(this, columnNames[i]);
            }
        }

        class ColumnFactory:  ColumnFactory<TaxDetailSearchRowBasic>
        {
            protected override Dictionary<string, Action<TaxDetailSearchRowBasic>> InitializeColumnBuilders()
            {
                return new Dictionary<string, Action<TaxDetailSearchRowBasic>> {
                    { "account", r => r.@account = new [] { new SearchColumnStringField { customLabel = "account" } } },
                    { "details", r => r.@details = new [] { new SearchColumnStringField { customLabel = "details" } } },
                    { "lineNumber", r => r.@lineNumber = new [] { new SearchColumnLongField { customLabel = "lineNumber" } } },
                    { "taxAmount", r => r.@taxAmount = new [] { new SearchColumnDoubleField { customLabel = "taxAmount" } } },
                    { "taxBasis", r => r.@taxBasis = new [] { new SearchColumnDoubleField { customLabel = "taxBasis" } } },
                    { "taxCode", r => r.@taxCode = new [] { new SearchColumnSelectField { customLabel = "taxCode" } } },
                    { "taxRate", r => r.@taxRate = new [] { new SearchColumnDoubleField { customLabel = "taxRate" } } },
                    { "taxType", r => r.@taxType = new [] { new SearchColumnSelectField { customLabel = "taxType" } } },
                    { "tranId", r => r.@tranId = new [] { new SearchColumnLongField { customLabel = "tranId" } } },
                };
            }
        }
    }
}