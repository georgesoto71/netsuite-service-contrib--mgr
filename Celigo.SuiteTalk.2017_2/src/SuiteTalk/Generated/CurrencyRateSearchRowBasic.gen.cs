//~ Generated by SearchStubs/SearchRowBasic

using System;
using System.Collections.Generic;

namespace SuiteTalk
{
    partial class CurrencyRateSearchRowBasic
    {
        // TODO: Make this Lazy and Weak referenced so that it can be garbaged collected
        private static readonly Lazy<ColumnFactory> columnFactoryLoader = new Lazy<ColumnFactory>(() => new ColumnFactory());

        public override void SetColumns(string[] columnNames)
        {
            var factory = columnFactoryLoader.Value;
            for (int i = 0; i < columnNames.Length; i++)
            {
                factory.BuildColumn(this, columnNames[i]);
            }
        }

        class ColumnFactory:  ColumnFactory<CurrencyRateSearchRowBasic>
        {
            protected override Dictionary<string, Action<CurrencyRateSearchRowBasic>> InitializeColumnBuilders()
            {
                return new Dictionary<string, Action<CurrencyRateSearchRowBasic>> {
                    { "baseCurrency", r => r.@baseCurrency = new [] { new SearchColumnSelectField { customLabel = "baseCurrency" } } },
                    { "effectiveDate", r => r.@effectiveDate = new [] { new SearchColumnDateField { customLabel = "effectiveDate" } } },
                    { "exchangeRate", r => r.@exchangeRate = new [] { new SearchColumnDoubleField { customLabel = "exchangeRate" } } },
                    { "internalId", r => r.@internalId = new [] { new SearchColumnSelectField { customLabel = "internalId" } } },
                    { "transactionCurrency", r => r.@transactionCurrency = new [] { new SearchColumnSelectField { customLabel = "transactionCurrency" } } },
                };
            }
        }
    }
}